import numpy as np

# Running this script will turn the raw csv pendulum trajectories generated by
# the MatLab script into two numpy files, one for testing and one for training.

# Fraction of trajectories from the csv data to process
# During final training of the model this should be 1.0, but during development
# lower values are acceptable (model will train faster)
total_fraction = 1

# Fraction of exported trajectories to reserve for testing
test_fraction = 0.2;

# %% Load joined trajectories from trajectories.csv file
joined_trajectories = np.genfromtxt('storage/data/trajectories.csv', delimiter=',')

(points, columns) = joined_trajectories.shape;

# %% Split up the joined trajectories 
current_trajectory = []
trajectories = []

last_time = -1
for i in range(points):
    point = joined_trajectories[i, :]
    time = point[0]
    
    if(time < last_time):
        trajectories.append(np.array(current_trajectory))
        current_trajectory = []
  
    current_trajectory.append(point) 
    last_time = time
    
trajectories.append(np.array(current_trajectory))
current_trajectory = []

trajectories = np.array(trajectories)

# %% Remove the time column from the data, we won't need it after this point.
trajectories = trajectories[:, :, 1:]

# %% Split up trajectories in train and test data

num_total = round(total_fraction*trajectories.shape[0])
num_test = round(num_total*test_fraction)
num_train = num_total-num_test

train_data = trajectories[0:num_train, :, :]
test_data = trajectories[num_train:num_total, :, :]

# %% Save train and test data to disk
np.save('storage/data/train.npy', train_data)
np.save('storage/data/test.npy', test_data)

print("Saved " + str(num_total) + " trajectories.")
print(str(num_train) + " trajectories of training data")
print(str(num_test) + " trajectories of test data")